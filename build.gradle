plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
//    id "com.google.protobuf" version "0.9.2"
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

shadowJar {
    archiveClassifier.set('')
}

tasks.register('configureCppProject', Exec) {
    // CMake로 C++ 프로젝트 구성
    commandLine 'cmake', 'src/main/cpp'
}

tasks.register('compileCpp', Exec) {
    // 구성된 C++ 프로젝트 빌드
    commandLine 'cmake', '--build', '.'
    // 'configureCppProject' 태스크가 먼저 실행되도록 의존성 설정
    dependsOn 'configureCppProject'
}

tasks.named('compileJava').configure {
    dependsOn compileCpp
}

tasks.named('runClient').configure {
    def maxMemory = System.getenv("CRAFTGROUND_JVM_MAX_MEMORY") ?: "8G"
    def enabledJmx = System.getenv("CRAFTGROUND_JVM_JMX_ENABLED") ?: "false"
    jvmArgs += "-Djava.library.path=${projectDir}"
    jvmArgs += "-XX:+UnlockExperimentalVMOptions"
    jvmArgs += "-XX:G1NewSizePercent=40"
    jvmArgs += "-XX:G1MaxNewSizePercent=50"
    jvmArgs += "-XX:G1ReservePercent=20"
    jvmArgs += "-XX:MaxTenuringThreshold=1"
    jvmArgs += "-XX:SurvivorRatio=32"
    jvmArgs += "-XX:+AlwaysPreTouch"
    jvmArgs += "-Xmx${maxMemory}" // Max memory from environment variable
    if (enabledJmx.toBoolean()) {
        def jmxPort = System.getenv("CRAFTGROUND_JVM_JMX_PORT") ?: "9010"
        def jmxHost = System.getenv("CRAFTGROUND_JVM_JMX_HOST") ?: "localhost"
        jvmArgs += "-Dcom.sun.management.jmxremote"
        jvmArgs += "-Dcom.sun.management.jmxremote.port=${jmxPort}"
        jvmArgs += "-Dcom.sun.management.jmxremote.ssl=false"
        jvmArgs += "-Dcom.sun.management.jmxremote.authenticate=false"
        jvmArgs += "-Djava.rmi.server.hostname=${jmxHost}"
    }
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://maven.flashyreese.me/releases"
    }
    maven {
        url "https://maven.flashyreese.me/snapshots"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi include("maven.modrinth:sodium:mc1.19.4-0.4.10")
    modApi include("maven.modrinth:lithium:mc1.19.4-0.11.1")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.grpc:grpc-kotlin-stub:1.3.0"
    implementation "io.grpc:grpc-protobuf:1.3.0"
    implementation 'com.google.protobuf:protobuf-kotlin:3.22.3'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

//protobuf {
//    protoc {
//        artifact = "com.google.protobuf:protoc:3.22.3"
//    }
//    plugins {
//        grpc {
//            artifact = "io.grpc:protoc-gen-grpc-java:1.54.1"
//        }
//        grpckt {
//            artifact = "io.grpc:protoc-gen-grpc-kotlin:1.3.0:jdk8@jar"
//        }
//    }
//    generateProtoTasks {
//        all().forEach {
//            it.plugins {
//                grpc
//                grpckt
//            }
//            it.builtins {
//                kotlin
//            }
//        }
//    }
//}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
